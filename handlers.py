import keyboards as kb
import utils

from database import requests
from datetime import datetime
from time import strptime, mktime
from aiogram.fsm.context import FSMContext
from aiogram.methods import EditMessageText
from aiogram.utils.formatting import Bold, Text, as_list, as_marked_section
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from states import *

router = Router()
person_profile = None

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    person_profile = await requests.get_profile(message.from_user.id)
    if person_profile is None:
        await state.set_state(PersonDataForm.is_driver)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –≤ –ø–æ–µ–∑–¥–∫–µ', reply_markup=kb.choose_role_kb)
    else:
        await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üé´')
        await process_show_profile(message)


@router.callback_query(F.data == 'passenger')
@router.callback_query(F.data == 'driver')
async def person(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'passenger':
        await state.update_data(is_driver=False)
    else:
        await state.update_data(is_driver=True)
    await callback.message.answer('–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∏–Ω—Ñ–æ—Ä–æ–º–∞—Ü–∏—é –æ —Å–µ–±–µ. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–∫–∏')
    if callback.from_user.full_name == '':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
        await state.set_state(PersonDataForm.name)
    else:
        await state.set_state(PersonDataForm.name)
        await state.update_data(name=callback.from_user.full_name)
        await state.set_state(PersonDataForm.phone)
        await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä')

@router.message(PersonDataForm.name)
async def process_person_name(message: Message, state: FSMContext):
    if utils.is_name_field_valid(message.text):
        await state.update_data(name=message.text)
        await state.set_state(PersonDataForm.phone)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä')
    else:
        await message.answer('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤')



@router.message(PersonDataForm.phone)
async def process_person_phone(message: Message, state: FSMContext):
    if utils.is_phone_field_valid(message.text):
        await state.update_data(phone=message.text)
        await state.set_state(PersonDataForm.city)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ @d_krasnonos –¥–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', reply_markup=kb.create_cities_markup())
    else:
        await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –±—É–∫–≤—ã')


@router.callback_query(PersonDataForm.city)
async def process_person_city(callback: CallbackQuery, state: FSMContext):
    data = await state.update_data(city=callback.data)
    if data['is_driver'] is False:
        await requests.create_person_profile(tg_id=callback.from_user.id, name=data['name'], username=callback.from_user.username, phone=data['phone'], city=data['city'])
        person_profile = await requests.get_profile(tg_id=callback.from_user.id)
        text = as_list(
            as_marked_section(
                '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!',
                '',
                Bold('üë§–ò–º—è: ') + person_profile.name,
                Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + person_profile.username,
                Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + person_profile.phone,
                Bold('üåá–ì–æ—Ä–æ–¥: ') + person_profile.city,
                marker=' '
            ),
            sep='\n\n'
        )
        await callback.message.answer(**text.as_kwargs())
        await callback.message.answer(text='–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–µ–∑–¥–∫–µ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å',
            reply_markup=kb.go_further_or_edit_markup)
        await state.clear()
    else:
        await callback.message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ')
        await state.set_state(PersonDataForm.vehicle)



@router.message(PersonDataForm.vehicle)
async def process_person_vehicle(message: Message, state: FSMContext):
    if utils.is_vehicle_field_valid(message.text):
        data = await state.update_data(vehicle=message.text)
        await requests.create_person_profile(tg_id=message.from_user.id, name=data['name'],
                                             username=message.from_user.username, phone=data['phone'], city=data['city'],
                                             vehicle=data['vehicle'])
        person_profile = await requests.get_profile(tg_id=message.from_user.id)
        text = as_list(
            as_marked_section(
                '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!',
                '',
                Bold('üë§–ò–º—è: ') + person_profile.name,
                Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + person_profile.username,
                Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + person_profile.phone,
                Bold('üõµ–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: ') + person_profile.vehicle,
                Bold('üåá–ì–æ—Ä–æ–¥: ') + person_profile.city,
                marker=' '
            ),
            sep='\n\n'
        )
        await message.answer(**text.as_kwargs())
        await message.answer(text='–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–µ–∑–¥–∫–µ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å',
                             reply_markup=kb.go_further_or_edit_markup)
        await state.clear()
    else:
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å—Å—ã–ª–∫–∏')


@router.message(Command('create_trip'))
async def process_create_trip(message: Message, state: FSMContext):
    person_profile = await requests.get_profile(tg_id=message.from_user.id)
    if person_profile is None:
        await message.answer(
            '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ /start, —ç—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã üòâ')
    else:
        await message.answer(text='–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?')
        await state.set_state(CreateTripDataForm.place)


@router.callback_query(F.data == 'create_trip')
async def process_create_trip(callback: CallbackQuery, state: FSMContext):
    person_profile = await requests.get_profile(tg_id=callback.from_user.id)
    if person_profile is None:
        await callback.message.answer(
            '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ /start, —ç—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã üòâ')
    else:
        await callback.message.answer(text='–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å?')
        await state.set_state(CreateTripDataForm.place)


@router.message(CreateTripDataForm.place)
async def process_enter_place(message: Message, state: FSMContext):
    if utils.is_place_field_valid(message.text):
        await state.update_data(place=message.text)
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏', reply_markup=kb.create_date_picker_markup())
        await state.set_state(CreateTripDataForm.date)
    else:
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Å—Å—ã–ª–∫–∏')


@router.callback_query(CreateTripDataForm.date)
async def process_enter_date(callback: CallbackQuery, state: FSMContext):
    date = strptime(f'{callback.data}-{datetime.now().year}', '%d %b-%Y')
    python_fromatted_date = datetime.fromtimestamp(mktime(date)).date()
    await state.update_data(date=python_fromatted_date)
    await callback.message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –µ–¥—É—Ç –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ (0, –µ—Å–ª–∏ –≤—ã –æ–¥–∏–Ω)')
    await state.set_state(CreateTripDataForm.number_of_persons)


@router.message(CreateTripDataForm.number_of_persons)
async def process_enter_number_of_persons(message: Message, state: FSMContext):
    if utils.is_number_field_valid(message.text):
        await state.update_data(number_of_persons=message.text)
        person_profile = await requests.get_profile(tg_id=message.from_user.id)
        if person_profile.vehicle != '':
            await state.update_data(is_person_driver=True)
            await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç')
            await state.set_state(CreateTripDataForm.available_seats)
        else:
            await state.update_data(is_person_driver=False)
            await state.update_data(available_seats=0)
            await message.answer(text='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ–µ–∑–¥–∫–µ')
            await state.set_state(CreateTripDataForm.comments)
    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9')



@router.message(CreateTripDataForm.available_seats)
async def process_enter_available_seats(message: Message, state: FSMContext):
    if utils.is_number_field_valid(message.text):
        await state.update_data(available_seats=int(message.text))
        await state.set_state(CreateTripDataForm.comments)
        await message.answer('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ–µ–∑–¥–∫–µ')
    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9')



@router.message(CreateTripDataForm.comments)
async def process_enter_comments(message: Message, state: FSMContext):
    data = await state.update_data(comments=message.text)
    await requests.create_trip(message.from_user.id, data)
    await message.answer(text='–ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã')
    await get_all_trips(message)
    await state.clear()


@router.message(Command('all_trips'))
async def get_all_trips(message: Message):
    profile = await requests.get_profile(message.from_user.id)
    if profile is None:
        await message.answer('–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ /start, —ç—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã üòâ')
    else:
        trip_items = await requests.get_all_trips(city=profile.city, tg_id=profile.tg_id)
        if len(trip_items) == 0:
            await message.answer(text='–ü–æ–µ–∑–¥–æ–∫ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∏–∑ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö /edit_profile')
        else:
            for item in trip_items:
                if item['person'].vehicle != '':
                    text = as_list(
                        as_marked_section(
                            Bold(item['trip'].date.strftime('%d %b')),
                            '',
                            Bold('üë§–ò–º—è: ') + item['person'].name,
                            Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + item['person'].username,
                            Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + item['person'].phone,
                            Bold('üõµ–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: ') + item['person'].vehicle,
                            Bold('üë•–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ') + item['trip'].available_seats,
                            Bold('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–æ –º–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏: ') + item['trip'].number_of_persons,
                            Bold('üèñ–ú–µ—Å—Ç–æ: ') + item['trip'].place,
                            Bold('üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ: ') + item['trip'].comments,
                            marker=' '
                        ),
                        sep='\n\n'
                    )
                    await message.answer(**text.as_kwargs())
                else:
                    text = as_list(
                        as_marked_section(
                            Bold(item['trip'].date.strftime('%d %b')),
                            '',
                            Bold('üë§–ò–º—è: ') + (item['person'].name),
                            Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + item['person'].username,
                            Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + item['person'].phone,
                            Bold('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–æ –º–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏: ') + item['trip'].number_of_persons,
                            Bold('üèñ–ú–µ—Å—Ç–æ: ') + item['trip'].place,
                            Bold('üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ: ') + item['trip'].comments,
                            marker=' '
                        ),
                        sep='\n\n'
                    )
                    await message.answer(**text.as_kwargs())


@router.callback_query(F.data == 'all_trips')
async def process_get_all_trips(callback: CallbackQuery):
    profile = await requests.get_profile(callback.from_user.id)
    if profile is None:
        await callback.message.answer('–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ /start, —ç—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã üòâ')
    else:
        trip_items = await requests.get_all_trips(city=profile.city, tg_id=profile.tg_id)
        if len(trip_items) == 0:
            await callback.message.answer(text='–ü–æ–µ–∑–¥–æ–∫ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∏–∑ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö /edit_profile')
        else:
            for item in trip_items:
                if item['person'].vehicle != '':
                    text = as_list(
                        as_marked_section(
                            Bold(item['trip'].date.strftime('%d %b')),
                            '',
                            Bold('üë§–ò–º—è: ') + item['person'].name,
                            Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + item['person'].username,
                            Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + item['person'].phone,
                            Bold('üõµ–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: ') + item['person'].vehicle,
                            Bold('üë•–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ') + item['trip'].available_seats,
                            Bold('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–æ –º–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏: ') + item['trip'].number_of_persons,
                            Bold('üèñ–ú–µ—Å—Ç–æ: ') + item['trip'].place,
                            Bold('üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ: ') + item['trip'].comments,
                            marker=' '
                        ),
                        sep='\n\n'
                    )
                    await callback.message.answer(**text.as_kwargs())
                else:
                    text = as_list(
                        as_marked_section(
                            Bold(item['trip'].date.strftime('%d %b')),
                            '',
                            Bold('üë§–ò–º—è: ') + (item['person'].name),
                            Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + item['person'].username,
                            Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + item['person'].phone,
                            Bold('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–æ –º–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏: ') + item['trip'].number_of_persons,
                            Bold('üèñ–ú–µ—Å—Ç–æ: ') + item['trip'].place,
                            Bold('üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ: ') + item['trip'].comments,
                            marker=' '
                        ),
                        sep='\n\n'
                    )
                    await callback.message.answer(**text.as_kwargs())


@router.message(Command('edit_profile'))
async def process_edit_profile(message: Message):
    person_profile = await requests.get_profile(tg_id=message.from_user.id)
    if person_profile is None:
        await message.answer('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ /start, —ç—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã üòâ')
    else:
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å', reply_markup=kb.edit_profile_markup)


@router.callback_query(F.data == 'edit_profile')
async def process_edit_profile(callback: CallbackQuery):
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å', reply_markup=kb.edit_profile_markup)


@router.callback_query(F.data == 'name')
async def process_edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è')
    await state.set_state(EditProfileDataForm.name)


@router.message(EditProfileDataForm.name)
async def process_set_new_name(message: Message, state: FSMContext):
    if utils.is_name_field_valid(message.text):
        await requests.edit_name(tg_id=message.from_user.id, value=message.text)
        await message.answer(text='–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
        await state.clear()
    else:
        await message.answer('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤ –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤')


@router.message(Command('profile'))
async def process_show_profile(message: Message):
    person_profile = await requests.get_profile(tg_id=message.from_user.id)
    if person_profile is None:
        await message.answer('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ /start, —ç—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã üòâ')
    else:
        if person_profile.vehicle != '':
            text = as_list(
                as_marked_section(
                    '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /edit_profile\n',
                    Bold('üë§–ò–º—è: ') + person_profile.name,
                    Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + person_profile.username,
                    Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + person_profile.phone,
                    Bold('üõµ–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: ') + person_profile.vehicle,
                    Bold('üåá–ì–æ—Ä–æ–¥: ') + person_profile.city,
                    marker=' '
                ),
                sep='\n\n'
            )
            await message.answer(**text.as_kwargs())
        else:
            text = as_list(
                as_marked_section(
                    '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /edit_profile\n',
                    Bold('üë§–ò–º—è: ') + person_profile.name,
                    Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + person_profile.username,
                    Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + person_profile.phone,
                    Bold('üåá–ì–æ—Ä–æ–¥: ') + person_profile.city,
                    marker=' '
                ),
                sep='\n\n'
            )
            await message.answer(**text.as_kwargs())


@router.callback_query(F.data == 'phone')
async def process_edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä')
    await state.set_state(EditProfileDataForm.phone)


@router.message(EditProfileDataForm.phone)
async def process_set_new_name(message: Message, state: FSMContext):
    if utils.is_phone_field_valid(message.text):
        await requests.edit_phone(tg_id=message.from_user.id, value=message.text)
        await message.answer(text='–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
        await state.clear()
    else:
        await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –±—É–∫–≤—ã')


@router.callback_query(F.data == 'vehicle')
async def process_edit_name(callback: CallbackQuery, state: FSMContext):
    person_profile = await requests.get_profile(callback.from_user.id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ç—Ä–∞—Å–Ω–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /delete)')
    await state.set_state(EditProfileDataForm.vehicle)


@router.message(EditProfileDataForm.vehicle)
async def process_set_new_name(message: Message, state: FSMContext):
    if message.text == '/delete':
        await requests.edit_vehicle(tg_id=message.from_user.id, value='')
    elif utils.is_vehicle_field_valid(message.text):
        await requests.edit_vehicle(tg_id=message.from_user.id, value=message.text)
        await message.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∞')
        await state.clear()
    else:
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å—Å—ã–ª–∫–∏')


@router.callback_query(F.data == 'city')
async def process_edit_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ @d_krasnonos –¥–ª—è –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', reply_markup=kb.create_cities_markup())
    await state.set_state(EditProfileDataForm.city)


@router.callback_query(EditProfileDataForm.city)
async def process_set_new_name(callback: CallbackQuery, state: FSMContext):
    await requests.edit_city(tg_id=callback.from_user.id, value=callback.data)
    await callback.message.answer(text='–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
    await state.clear()


@router.message(Command('my_trips'))
async def process_get_my_trips(message: Message):
    person_profile = await requests.get_profile(tg_id=message.from_user.id)
    if person_profile is None:
        await message.answer(
            '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ /start, —ç—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã üòâ')
    else:
        my_trips = await requests.get_my_trips(message.from_user.id)
        text = ''
        if len(my_trips) == 0:
            await message.answer(
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–æ–µ–∑–¥–∫—É —Å –∫–æ–º–∞–Ω–¥–æ–π /create_trip üõµ')
        else:
            for trip in my_trips:
                if trip.is_person_driver is True:
                    text = as_list(
                        as_marked_section(
                            Bold('#' + str(trip.id)),
                            '',
                            Bold('üìÜ–î–∞—Ç–∞: ') + trip.date.strftime('%d %b'),
                            Bold('üë•–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ') + trip.available_seats,
                            Bold('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–æ –º–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏: ') + trip.number_of_persons,
                            Bold('üèñ–ú–µ—Å—Ç–æ: ') + trip.place,
                            Bold('üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ: ') + trip.comments,
                            marker=' '
                        ),
                        sep='\n\n'
                    )
                else:
                    text = as_list(
                        as_marked_section(
                            Bold('#' + str(trip.id)),
                            '',
                            Bold('üìÜ–î–∞—Ç–∞: ') + trip.date.strftime('%d %b'),
                            Bold('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–æ –º–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏: ') + trip.number_of_persons,
                            Bold('üèñ–ú–µ—Å—Ç–æ: ') + trip.place,
                            Bold('üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ: ') + trip.comments,
                            marker=' '
                        ),
                        sep='\n\n'
                    )
                await message.answer(**text.as_kwargs(), reply_markup=kb.edit_or_delete_trip_markup)


@router.callback_query(F.data == 'edit_trip')
async def process_edit_trip(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditTripDataForm.id)
    await state.update_data(id=callback.message.text[1:3])
    trip = await requests.get_trip_by_id(trip_id=callback.message.text[1:3])
    if trip.is_person_driver:
        await callback.message.answer('–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb.choose_trip_property_for_update_driver_markup)
    else:
        await callback.message.answer('–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb.choose_trip_property_for_update_passenger_markup)


@router.callback_query(F.data == 'edit_date', EditTripDataForm.id)
async def process_edit_date(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏', reply_markup=kb.create_date_picker_markup())
    await state.set_state(EditTripDataForm.date)


@router.callback_query(EditTripDataForm.date)
async def process_enter_new_date(callback: CallbackQuery, state: FSMContext):
    date = strptime(f'{callback.data}-{datetime.now().year}', '%d %b-%Y')
    python_fromatted_date = datetime.fromtimestamp(mktime(date)).date()
    data = await state.update_data(date=python_fromatted_date)
    await requests.update_date(data)
    await callback.message.answer(text='–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ')
    await state.clear()


@router.callback_query(F.data == 'edit_place', EditTripDataForm.id)
async def process_edit_place(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditTripDataForm.place)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å')


@router.message(EditTripDataForm.place)
async def process_enter_new_place(message: Message, state: FSMContext):
    if utils.is_place_field_valid(message.text):
        data = await state.update_data(place=message.text)
        await requests.update_place(data)
        await message.answer('–ú–µ—Å—Ç–æ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')
        await state.clear()
    else:
        await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Å—Å—ã–ª–∫–∏')


@router.callback_query(F.data == 'edit_available_seats', EditTripDataForm.id)
async def process_edit_available_seats(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditTripDataForm.available_seats)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç')


@router.message(EditTripDataForm.available_seats)
async def process_enter_new_available_seats(message: Message, state: FSMContext):
    if utils.is_number_field_valid(message.text):
        data = await state.update_data(available_seats=int(message.text))
        await requests.update_available_seats(data)
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')
        await state.clear()
    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9')


@router.callback_query(F.data == 'edit_number_of_persons', EditTripDataForm.id)
async def process_edit_number_of_persons(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditTripDataForm.number_of_persons)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ –ø–æ–µ–∑–¥–∫–µ —Å –≤–∞–º–∏')


@router.message(EditTripDataForm.number_of_persons)
async def process_enter_new_number_of_persons(message: Message, state: FSMContext):
    if utils.is_number_field_valid(message.text):
        data = await state.update_data(number_of_persons=int(message.text))
        await requests.update_number_of_persons(data)
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ –ø–æ–µ–∑–¥–∫–µ —Å –≤–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')
        await state.clear()
    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9')

@router.callback_query(F.data == 'edit_comments', EditTripDataForm.id)
async def process_edit_comments(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditTripDataForm.comments)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ')


@router.message(EditTripDataForm.comments)
async def process_enter_new_comments(message: Message, state: FSMContext):
    if utils.is_comments_field_valid(message.text):
        data = await state.update_data(comments=message.text)
        await requests.update_comments(data)
        await message.answer('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ')
        await state.clear()
    else:
        await message.answer('–î–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è —Å—Å—ã–ª–∫–∏')


@router.callback_query(F.data == 'cancel', EditTripDataForm.id)
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–µ–Ω—é')


@router.callback_query(F.data == 'delete_trip')
async def process_delete_trip(callback: CallbackQuery):
    trip_id = int(callback.message.text[1:3])
    await requests.delete_trip(trip_id)
    if await requests.is_trip_deleted(trip_id):
        return EditMessageText(text='–ü–æ–µ–∑–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ', message_id=callback.message.message_id, chat_id=callback.message.chat.id)
    else:
        await callback.message.answer('‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –ø–æ–µ–∑–¥–æ–∫ –∑–∞–Ω–æ–≤–æ /my_trips')


@router.message(Command('find_trip'))
async def find_trips(message: Message, state: FSMContext):
    person_profile = await requests.get_profile(tg_id=message.from_user.id)
    if person_profile is None:
        await message.answer(
            '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –ø–æ –∫–Ω–æ–ø–∫–µ /start, —ç—Ç–æ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã üòâ')
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫, –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', reply_markup=kb.create_date_picker_markup())
        await state.set_state(FindTripByDateForm.city)
        await state.update_data(city=person_profile.city)
        await state.set_state(FindTripByDateForm.date)

@router.callback_query(FindTripByDateForm.date)
async def process_find_trips_by_date(callback: CallbackQuery, state: FSMContext):
    date = strptime(f'{callback.data}-{datetime.now().year}', '%d %b-%Y')
    python_fromatted_date = datetime.fromtimestamp(mktime(date)).date()
    data = await state.update_data(date=python_fromatted_date)
    trip_items = await requests.find_trips_by_date(data=data, tg_id=callback.from_user.id)
    await state.clear()
    if len(trip_items) == 0:
        await callback.message.answer('–ü–æ–µ–∑–¥–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–æ–π –¥–∞—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ /edit_profile')
    else:
        for item in trip_items:
            if item['person'].vehicle != '':
                text = as_list(
                    as_marked_section(
                        Bold(item['trip'].date.strftime('%d %b')),
                        '',
                        Bold('üë§–ò–º—è: ') + item['person'].name,
                        Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + item['person'].username,
                        Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + item['person'].phone,
                        Bold('üõµ–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ: ') + item['person'].vehicle,
                        Bold('üë•–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ') + item['trip'].available_seats,
                        Bold('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–æ –º–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏: ') + item['trip'].number_of_persons,
                        Bold('üèñ–ú–µ—Å—Ç–æ: ') + item['trip'].place,
                        Bold('üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ: ') + item['trip'].comments,
                        marker=' '
                    ),
                    sep='\n\n'
                )
                await callback.message.answer(**text.as_kwargs())
            else:
                text = as_list(
                    as_marked_section(
                        Bold(item['trip'].date.strftime('%d %b')),
                        '',
                        Bold('üë§–ò–º—è: ') + (item['person'].name),
                        Bold('üï∂Ô∏è–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ') + item['person'].username,
                        Bold('üì±–¢–µ–ª–µ—Ñ–æ–Ω: ') + item['person'].phone,
                        Bold('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–æ –º–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏: ') + item['trip'].number_of_persons,
                        Bold('üèñ–ú–µ—Å—Ç–æ: ') + item['trip'].place,
                        Bold('üìù–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ: ') + item['trip'].comments,
                        marker=' '
                    ),
                    sep='\n\n'
                )
                await callback.message.answer(**text.as_kwargs())

# Handler for unknown commands
@router.message(F.text)
async def process_unknown_command(message: Message):
    await message.answer('‚ùóÔ∏è–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é')

